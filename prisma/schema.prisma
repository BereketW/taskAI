generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ==========================
 */
/**
 * ðŸ”¹ USER AUTHENTICATION
 */
/**
 * ==========================
 */

model User {
  id              String            @id
  name            String            @db.Text
  email           String
  emailVerified   Boolean
  image           String?           @db.Text
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  Workspace       Workspace[]
  WorkspaceMember WorkspaceMember[]
  TaskList        TaskList[]
  Task            Task[]
  TaskComment     TaskComment[]
  // AiSuggestion    AiSuggestion[]
  TaskActivityLog TaskActivityLog[]
  Reminder        Reminder[]
  TaskAttachment  TaskAttachment[]
  Notification    Notification[]
  Onboarding      Onboarding?

  chats       Chat[]
  documents   Document[]
  suggestions Suggestion[]

  @@unique([email])
  @@map("user")
}

model Onboarding {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Link back to the User (One-to-One relationship) ---
  userId String @unique // Foreign key referencing the User, @unique enforces 1-to-1
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation definition, deletes onboarding if user is deleted

  // --- Onboarding Data Fields (Moved from User model) ---

  // Step 1 - Personal/Company Info
  jobTitle   String?
  company    String?
  roleInTeam RoleInTeam? @default(TEAM_MEMBER)

  // Step 2 - Team & Collaboration
  teamSize        TeamSize?
  workStyle       WorkStyle? @default(HYBRID)
  primaryWorkType String?

  // Step 3 - Task Management Preferences
  biggestChallenge  String?
  preferredView     TaskView? @default(LIST)
  currentTools      String[]
  productivityPeaks String[]

  // Step 4 - Integrations Preference
  calendarIntegration CalendarProvider?
  communicationTool   CommTool?
  fileStorage         FileStorageProvider?

  // Step 5 - AI Features & Goals
  aiFeatures        String[] @default(["suggestions", "prioritization", "insights"])
  aiAssistanceAreas String[]
  primaryGoal       String?

  // Onboarding status tracking
  lastCompletedStep Int?    @default(0) // Last completed step number (e.g., 0 means none, 1 means step 1 done)
  completed         Boolean @default(false) // Flag indicating if the entire onboarding flow is finished
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  timestamp DateTime @default(now())
  read      Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id])
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workspace {
  id           String            @id @default(uuid())
  name         String
  description  String            @db.Text
  ownerId      String
  owner        User              @relation(fields: [ownerId], references: [id])
  visibility   Visibility
  members      WorkspaceMember[]
  taskLists    TaskList[]
  integrations Integration[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("workspace")
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        Role
  joinedAt    DateTime  @default(now())

  @@map("workspaceMember")
}

/**
 * ==========================
 */
/**
 * ðŸ”¹ TASK MANAGEMENT
 */
/**
 * ==========================
 */

model TaskList {
  id          String @id @default(uuid())
  name        String
  description String @db.Text

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id           String            @id @default(uuid())
  title        String
  description  String?
  list         TaskList          @relation(fields: [listId], references: [id])
  listId       String
  assignedTo   User?             @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  dueDate      DateTime?
  dueTime      String
  priority     Priority
  status       TaskStatus
  comments     TaskComment[]
  isCompleted  Boolean           @default(false)
  completedAt  DateTime?
  subtask      Subtask[]
  activityLogs TaskActivityLog[]
  reminders    Reminder[]
  category     String            @db.Text
  attachments  TaskAttachment[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("task")
}

/**
 * ==========================
 */
/**
 * ðŸ”¹ COLLABORATION
 */
/**
 * ==========================
 */

model TaskComment {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   String
  createdAt DateTime @default(now())
}

model TaskActivityLog {
  id        String         @id @default(uuid())
  task      Task           @relation(fields: [taskId], references: [id])
  taskId    String
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  action    ActivityAction
  timestamp DateTime       @default(now())
}

model Subtask {
  id          String    @id @default(uuid())
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      String
  title       String
  description String    @db.Text
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
}

model Reminder {
  id           String         @id @default(uuid())
  task         Task           @relation(fields: [taskId], references: [id])
  taskId       String
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  reminderTime DateTime
  status       ReminderStatus
  createdAt    DateTime       @default(now())
}

model TaskAttachment {
  id           String   @id @default(uuid())
  task         Task     @relation(fields: [taskId], references: [id])
  taskId       String
  fileUrl      String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
}

model AIInsight {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  userId             String // Reference to the user
  confidence         Float // AI confidence score (0-100)
  potentialTime      Float // Estimated time saved (in hours)
  activeCount        Int // Active suggestions count
  implementationRate Float // Percentage of implemented suggestions
  actions            Action[] // Relationship with actions
}

model Action {
  id              String    @id @default(uuid())
  aiInsightId     String
  aiInsight       AIInsight @relation(fields: [aiInsightId], references: [id], onDelete: Cascade)
  actionType      String // Action title
  description     String? // Short description
  impactLevel     String // "High", "Medium", "Low"
  confidenceScore Int
  estimatedTime   Int // Estimated time (in minutes)
}

/**
 * ==========================
 */
/**
 * ðŸ”¹ INTEGRATIONS & NOTIFICATIONS
 */
/**
 * ==========================
 */

model Integration {
  id              String          @id @default(uuid())
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  integrationType IntegrationType
  config          Json
  createdAt       DateTime        @default(now())
}

// model Notification {
//   id        String           @id @default(uuid())
//   user      User             @relation(fields: [userId], references: [id])
//   userId    String
//   message   String
//   type      NotificationType
//   isRead    Boolean          @default(false)
//   createdAt DateTime         @default(now())
// }

/**
 * ==========================
 */
/**
 * ðŸ”¹ ENUMS
 */
/**
 * ==========================
 */

//Chatbot Schema

model Chat {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  title      String    @db.Text
  userId     String
  visibility String    @default("private") @db.VarChar(7)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]
  votes      Vote[]

  @@map("Chat")
}

model Message {
  id          String   @id @default(uuid())
  chatId      String
  role        String   @db.VarChar
  parts       Json
  attachments Json
  createdAt   DateTime @default(now())
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@map("Message_v2")
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([chatId, messageId])
  @@map("Vote_v2")
}

model Document {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  title       String       @db.Text
  content     String?      @db.Text
  kind        String       @default("text") @db.VarChar(5)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestions Suggestion[]

  @@unique([id, createdAt])
  @@map("Document")
}

model Suggestion {
  id                String   @id @default(uuid())
  documentId        String
  documentCreatedAt DateTime
  originalText      String   @db.Text
  suggestedText     String   @db.Text
  description       String?  @db.Text
  isResolved        Boolean  @default(false)
  userId            String
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document          Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt], onDelete: Cascade)

  @@map("Suggestion")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Visibility {
  PRIVATE
  PUBLIC
  TEAM
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum ActivityAction {
  CREATED
  UPDATED
  COMPLETED
  DELETED
  ASSIGNED
}

enum ReminderStatus {
  PENDING
  SENT
  CANCELED
}

enum IntegrationType {
  SLACK
  GITHUB
  GOOGLE_CALENDAR
  NOTION
}

enum NotificationType {
  TASK_DUE
  MENTION
  REMINDER
  SYSTEM
}

enum RoleInTeam {
  TEAM_MEMBER
  TEAM_LEAD
  MANAGER
  SOLO_USER
  OTHER
}

enum TeamSize {
  JUST_ME
  S_2_5
  S_6_10
  S_11_25
  S_26_PLUS
}

enum WorkStyle {
  REMOTE
  IN_OFFICE
  HYBRID
}

enum TaskView {
  LIST
  BOARD // Kanban style
  CALENDAR
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
  NONE
}

enum CommTool {
  SLACK
  TEAMS
  DISCORD
  NONE
}

enum FileStorageProvider {
  GDRIVE
  DROPBOX
  ONEDRIVE
  NONE
}
